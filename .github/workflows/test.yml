name: Tests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        flattening: [flatten_all, flatten_none]
    outputs:
      coverage: ${{ steps.coverage.outputs.json }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Cache NPM packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Install and build the package
      - name: Install root package
        run: npm install
      - name: Build
        run: npm run build

      # Setup and install the test environment
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install test package
        run: npm install --prefix test
      - name: Cache emulators
        uses: actions/cache@v2.0.0
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}
      - name: Install emulators
        run: test/node_modules/.bin/firebase setup:emulators:firestore 

      # Run tests
      # Set output coverage JSON regardless if test failed or not
      - name: Run tests
        run: npm test
        env: 
          FLATTENING: ${{ matrix.flattening }}
      - name: Remap
        id: coverage
        if: ${{ always() }}
        run: echo ::set-output name=json::'$(npm run remap -s --prefix test)'

  codecov:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: test
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v1

      # Write separate coverage outputs to "input" directory
      - name: Make "input" directory
        run: mkdir input
      - name: Write input coverage reports
        run: echo "${{ needs.test.ouputs.coverage }}"

      # Combine coverate
      - name: Combine coverage
        run: npx istanbul-combine -- -d detail -r json input/*.json
      
      # Upload report
      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
